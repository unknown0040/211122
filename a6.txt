import java.util.*;
import java.util.Arrays;
public class Fit {
static void NextFit(int blockSize[], int m, int processSize[], int n) {
int allocation[] = new int[n], j = 0;
Arrays.fill(allocation, -1);
for (int i = 0; i < n; i++) {
int count =0;
while (j < m) {
count++;
if (blockSize[j] >= processSize[i]) {
allocation[i] = j;
blockSize[j] -= processSize[i];
break;
}
j = (j + 1) % m;
}
}
System.out.print("\nProcess No.\tProcess Size\tBlock no.\n");
for (int i = 0; i < n; i++) {
System.out.print( i + 1 + "\t\t" + processSize[i]+ "\t\t");
if (allocation[i] != -1) {
System.out.print(allocation[i] + 1);
}
else {
System.out.print("Not Allocated");
}
System.out.println("");
}
}
static void worstFit(int blockSize[], int m, int processSize[],int n){
int allocation[] = new int[n];
for (int i = 0; i < allocation.length; i++)
allocation[i] = -1;
for (int i=0; i<n; i++){
int wstIdx = -1;
for (int j=0; j<m; j++){
if (blockSize[j] >= processSize[i]){
if (wstIdx == -1)
wstIdx = j;
else if (blockSize[wstIdx] < blockSize[j])
wstIdx = j;
}
}
if (wstIdx != -1){
allocation[i] = wstIdx;
blockSize[wstIdx] -= processSize[i];
}
}
System.out.println("\nProcess No.\tProcess Size\tBlock no.");
for (int i = 0; i < n; i++){
System.out.print(" " + (i+1) + "\t\t" + processSize[i] + "\t\t");
if (allocation[i] != -1)
System.out.print(allocation[i] + 1);
else
System.out.print("Not Allocated");
System.out.println();
}
}
static void bestFit(int blockSize[], int m, int processSize[],int n){
int allocation[] = new int[n];
for (int i = 0; i < allocation.length; i++)
allocation[i] = -1;
for (int i=0; i<n; i++){
int bestIdx = -1;
for (int j=0; j<m; j++)
{
if (blockSize[j] >= processSize[i])
{
if (bestIdx == -1)
bestIdx = j;
else if (blockSize[bestIdx] > blockSize[j])
bestIdx = j;
}
}
if (bestIdx != -1){
allocation[i] = bestIdx;
blockSize[bestIdx] -= processSize[i];
}
}
System.out.println("\nProcess No.\tProcess Size\tBlock no.");
for (int i = 0; i < n; i++)
{
System.out.print(" " + (i+1) + "\t\t" + processSize[i] + "\t\t");
if (allocation[i] != -1)
System.out.print(allocation[i] + 1);
else
System.out.print("Not Allocated");
System.out.println();
}
}
static void firstFit(int blockSize[], int m,int processSize[], int n){
int allocation[] = new int[n];
for (int i = 0; i < allocation.length; i++)
allocation[i] = -1;
for (int i = 0; i < n; i++){
for (int j = 0; j < m; j++){
if (blockSize[j] >= processSize[i]){
allocation[i] = j;
blockSize[j] -= processSize[i];
}
}
}
System.out.println("\nProcess No.\tProcess Size\tBlock no.");
for (int i = 0; i < n; i++){
System.out.print(" " + (i+1) + "\t\t" +processSize[i] + "\t\t");
if (allocation[i] != -1)
System.out.print(allocation[i] + 1);
else
System.out.print("Not Allocated");
System.out.println();
}
}
public static void main(String[] args) {
int choice,m,n;
int blockSize[]=new int[15],processSize[]=new int[15];
Scanner sc=new Scanner(System.in);
System.out.println("Enter the number of blocks : ");
m=sc.nextInt();
System.out.println("Enter the number of processes : ");
n=sc.nextInt();
for (int i=0;i<n;i++){
System.out.println("Enter the processes: ");
processSize[i]=sc.nextInt();
}
for (int i=0;i<m;i++){
System.out.println("Enter the blocks : ");
blockSize[i]=sc.nextInt();
}
while (true){
System.out.println("\n**************MENU******************\n\n");
System.out.println("1. Best Fit\n2. First Fit\n3. Next Fit\n4. Worst Fit\n5.Exit\n\n");
System.out.println("Enter your choice : ");
choice=sc.nextInt();
if(choice == 5){ break;}
switch (choice){
case 1:bestFit(blockSize, m, processSize, n);
break;
case 2:firstFit(blockSize, m, processSize, n);
break;
case 3:NextFit(blockSize, m, processSize, n);
break;
case 4:worstFit(blockSize, m, processSize, n);
break;
default: break;
}
}
}
}

